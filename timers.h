#ifndef TIMERS_H
#define TIMERS_H

#include "logger-library/logger.h"

//-----------------------------------------------------------------------------

namespace timers
{

//=============================================================================

// Для обозначения частоты обновления.
typedef double hz_t;
// Для обозначения тиков цикла.
typedef long ticks_t;

//-------------------------------------------------------------------------

// Перевести строку в Гц.
hz_t strToHz(std::string & data);

//-----------------------------------------------------------------------------

// Класс для работы со временем сна цикла.
class Tick
{
public:

    Tick();
    ~Tick() {}

    //-------------------------------------------------------------------------

    Tick & operator++();

    //-------------------------------------------------------------------------

    // Получить текущий номер тика.
    ticks_t getCurTick();
    // Перевести Гц в количество тиков.
    ticks_t hzToTicks(hz_t & hz);
    // Перевести тики в Гц.
    hz_t ticksToHz(ticks_t & ticks);

    //-------------------------------------------------------------------------

    // Заснуть на определенный срок.
    void sleep();
    // Проверить наступило ли время считывания конкретного пула.
    bool isNow(ticks_t & ticks);

private:

    // Класс логирования.
    logger::Logger log;

    //-------------------------------------------------------------------------

    // Для обозначения времени сна основного цикла.
    typedef long sleepTime_t;

    //-------------------------------------------------------------------------

    // Сколько миллисекунд спит цикл.
    const sleepTime_t m_sleepTime = 10;
    // Максимальная частота обновления устройств - 100 раз в секунду.
    const ticks_t m_maxTicks = 100;
    // Максимальное количество тиков, после которого текущий тик сбрасывается в единицу.
    const ticks_t m_maxTickCnt = 1000;

    //-------------------------------------------------------------------------

    // Для обозначения текущего тика.
    ticks_t m_curTick;
};

//=============================================================================

} // namespace timers

#endif // TIMERS_H
