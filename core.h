#ifndef CORE_H
#define CORE_H

//-----------------------------------------------------------------------------

#include <iostream>
#include <condition_variable>
#include <sstream>

#include "statistic.h"
#include "protocol.h"
#include "logger-library/logger.h"

//-----------------------------------------------------------------------------

namespace core
{

//=============================================================================

class Core
{
public:

    Core();
    ~Core() {};

    //-------------------------------------------------------------------------

    // Запустить взаимодействие с ТПО.
    bool start();

private:

    // Класс логирования.
    logger::Logger log;

    // Для оповещения о новом пакете.
    std::condition_variable m_pkgCV;
    // Для блокировки в условной переменной.
    std::mutex m_pkgCVMutex;
    // Для сохранения нового пакета на отправку.
    std::stringstream m_pkg;

    //-------------------------------------------------------------------------

    // Для чтения статистики от устройств.
    statistic::Statistic m_devStat;
    // Для взаимодействия с протоколом ТПО.
    tpoprotocol::TpoProtocol m_proto;

    //-------------------------------------------------------------------------

    // Поток для получения данных от ТПО.
    std::thread m_recvThread;
    // Функция запуска потока получения данных от ТПО.
    bool m_startThread();
    // Функция потока для получения данных от ТПО.
    static void m_recvCmd(Core * core);

    //-------------------------------------------------------------------------

    // Функция ожидания нового пакета.
    void m_waitForPkg();
};


//=============================================================================

} // namespace core


#endif // CORE_H
