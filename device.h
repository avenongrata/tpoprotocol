#ifndef DEVICE_H
#define DEVICE_H

//-----------------------------------------------------------------------------

#include <iostream>
#include <unistd.h>
#include <vector>
#include <mutex>
#include <list>

#include "logger-library/logger.h"

//-----------------------------------------------------------------------------

namespace dev
{

//=============================================================================

// Базовый адрес и количество регистров устройства.
typedef std::pair<uint32_t, unsigned int> devInfo_t;
// Вектор информации об устройствах.
typedef std::vector<devInfo_t> devsInfo_t;

// Адрес регистра и его значение.
typedef std::pair<uint32_t, uint32_t> register_t;
// Вектор регистров со значениями.
typedef std::vector<register_t> region_t;
// Вектор регионов.
typedef std::vector<region_t> devsRegion_t;

//-----------------------------------------------------------------------------

class Device
{
public:

    Device(devInfo_t & dev);
    ~Device();

    //-------------------------------------------------------------------------

    // Заполнить массив устройства базовыми адресами.
    void fillAddrs(region_t & region);
    // Прочитать регион устройства.
    bool read(region_t & region);
    // Записать значение в регион целиком.
    bool write(uint32_t & value);

    //-------------------------------------------------------------------------

private:

    // Класс логирования.
    logger::Logger log;

    // Дескриптор символьного устройства, представляющий область физической памяти.
    int m_fd;
    // Информация о базовом адресе и количестве регистров устройства.
    devInfo_t m_dev;
    // Отображенный адрес устройства в физической памяти.
    void * m_mapBase;
    // Смещение в странице памяти.
    uint32_t m_offset;
    // Флаг, обозначающий, что память устройства была отображена.
    bool m_mappedFlag;
    // Размер смещения до следующего регистра.
    const unsigned int m_step = sizeof(uint32_t);
    // Размер страницы.
    const unsigned int m_pagesize = (unsigned)getpagesize();

    //-------------------------------------------------------------------------

    // Отобразить память устройство в физическую память.
    bool m_mapRegion();
    // Прочитать значения регистров устройства.
    void m_readRegion(region_t & region);

    //-------------------------------------------------------------------------

    // Открыть файл символьного устройства.
    bool m_openChrdev();
    // Отобразить устройство в физическую память.
    bool m_mmap();
};

//=============================================================================
//=============================================================================

class Devices
{
public:

    Devices(dev::devInfo_t & dev);
    ~Devices();

    //-------------------------------------------------------------------------

    // Прочитать регионы устройств.
    bool read(devsRegion_t ** regions);

    //-------------------------------------------------------------------------

    // Добавить устройство к пулу считываемых.
    bool add(dev::devInfo_t & devInfo);
    // Удалить устройство из пула считываемых.
    bool remove(uint32_t & addr);
    // Удалить все устройства из пула считываемых.
    void removeAll();


    //-------------------------------------------------------------------------

    // Вернуть список активных устройств.
    devsInfo_t getActive();
    // Проверить находится ли устройство в пуле.
    bool isExist(uint32_t & addr);
    // Проверить есть ли активные устройства.
    bool isActive();

    //-------------------------------------------------------------------------

private:

    // Класс логирования.
    logger::Logger log;

    // Структура устройства.
    struct m_dev_t
    {
        devInfo_t devInfo;  // Информация о базовом адресе и количестве регистров.
        Device * dev;       // Указатель на класс устройства.
        region_t * region;  // Регион устройства.
    };
    // Вектор указателей на устройство и его информацию.
    typedef std::vector<m_dev_t *> devs_t;

    // Вектор устройств.
    devs_t m_devs;
    // Мьютекс для работы с устройствами.
    std::mutex m_devsMutex;
    // Вектор регионов устройств.
    devsRegion_t m_regions;

    //-------------------------------------------------------------------------

    // Проверить сущесвтует ли устройство.
    bool m_isExist(uint32_t & addr);

    //-------------------------------------------------------------------------

    // Создать и добавить устройство в пул.
    void m_createDev(devInfo_t & devInfo);

    //-------------------------------------------------------------------------

    // Прочитать вектор регионов устройств.
    bool m_readRegions();
    // Получить вектор регионов устройств.
    void m_getRegions();

    //-------------------------------------------------------------------------

    // Очистить память, выделенную под устройство.
    void m_deleteDev(m_dev_t * devInfo);
    // Очистить память и удалить устройства.
    void m_deleteDevs();
    // Очистить вектор регионов устройств.
    void m_deleteRegions();
};

//=============================================================================

} // namespace dev

#endif // DEVICE_H
